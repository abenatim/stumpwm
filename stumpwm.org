#+title: Aabm's literate configuration for StumpWM
#+author: aabm
#+email: aabm@disroot.org
#+startup: overview

* Startup options
** Have SBCL start StumpWM

This is the file that will get loaded by SBCL.

#+begin_src lisp :tangle start.lisp
(require :stumpwm)
(stumpwm:stumpwm)
#+end_src

** Start Lisp server

#+begin_src lisp :tangle init.lisp
(require :swank)
(swank-loader:init)
(swank:create-server :port 4004
                     :style swank:*communication-style*
                     :dont-close t)

#+end_src

** Use StumpWM package by default

#+begin_src lisp :tangle init.lisp
(in-package :stumpwm)
(setf *default-package* :stumpwm)
#+end_src

** Disable startup messages

#+begin_src lisp :tangle init.lisp
(setf *startup-message* "Welcome to StumpWM!"
      *suppress-abort-messages* t)
#+end_src

** Use the right shell

#+begin_src lisp :tangle init.lisp
(setf *shell-program* (getenv "SHELL"))
#+end_src

* Initial shell commands

Set basic options. Compositor, keyboard layout, mouse and wallpaper.

#+begin_src lisp :tangle init.lisp
(run-shell-command "picom -b &")
(run-shell-command "setxkbmap -layout br -option ctrl:swapcaps_hyper &")
(run-shell-command "xsetroot -cursor_name left_ptr &")
(run-shell-command "pape")
#+end_src

* Keybindings

** Prefix key

#+begin_src lisp :tangle init.lisp
  (set-prefix-key (kbd "s-z"))
#+end_src

** Starting programs

#+begin_src lisp :tangle init.lisp
  (define-key *top-map* (kbd "s-e") "exec emacsclient -c")
  (define-key *top-map* (kbd "s-c") "exec element-desktop")
  (define-key *top-map* (kbd "s-r") "exec pkill sbcl")
  (define-key *top-map* (kbd "s-RET") "exec st")
  (define-key *top-map* (kbd "s-g") "exec st -e gotop")
  (define-key *top-map* (kbd "s-w") "exec firefox")
#+end_src

** Window management

#+begin_src lisp :tangle init.lisp
  (define-key *top-map* (kbd "s-o") "other")
  (define-key *top-map* (kbd "s-q") "delete")
  (define-key *top-map* (kbd "s-j") "eval")
#+end_src

** dmenu

#+begin_src lisp :tangle init.lisp
  (define-key *top-map* (kbd "s-b") "exec windowswitch")
  (define-key *top-map* (kbd "s-x") "exec dmenu_run_history")
#+end_src

** huh

#+begin_src lisp :tangle init.lisp
  (defvar *window-and-frame-bindings*
    (let ((m (make-sparse-keymap)))
      (define-key m (kbd "0") "remove")
      (define-key m (kbd "1") "only")
      (define-key m (kbd "2") "vsplit")
      (define-key m (kbd "3") "hsplit")
      (define-key m (kbd "o") "fother")
      (define-key m (kbd "b") "windowlist")
      (define-key m (kbd "H-b") "frame-windowlist")
      m))

  (define-key *top-map* (kbd "H-x") '*window-and-frame-bindings*)
#+end_src

** System keys

#+begin_src lisp :tangle init.lisp
(define-key *top-map* (kbd "XF86MonBrightnessDown") "exec brightnessctl set 5%-")
(define-key *top-map* (kbd "XF86MonBrightnessUp") "exec brightnessctl set +5%")

(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec pamixer -d 5")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec pamixer -i 5")
(define-key *top-map* (kbd "XF86AudioMute") "exec pamixer --toggle-mute")
#+end_src

* Groups

** Set groups

#+begin_src lisp :tangle init.lisp
(setf (group-name (car (screen-groups (current-screen)))) "I")
(run-commands "gnewbg II" "gnewbg III" "gnewbg  III" "gnewbg IV" "gnewbg V")
#+end_src

** Keybindings

#+begin_src lisp :tangle init.lisp
(define-key *top-map* (kbd "s-1") "gselect 1")
(define-key *top-map* (kbd "s-2") "gselect 2")
(define-key *top-map* (kbd "s-3") "gselect 3")
(define-key *top-map* (kbd "s-4") "gselect 4")
(define-key *top-map* (kbd "s-5") "gselect 5")

(define-key *top-map* (kbd "s-!") "gmove 1")
(define-key *top-map* (kbd "s-@") "gmove 2")
(define-key *top-map* (kbd "s-#") "gmove 3")
(define-key *top-map* (kbd "s-$") "gmove 4")
(define-key *top-map* (kbd "s-%") "gmove 5")
#+end_src

* Modules
** Loading external modules

#+begin_src lisp :tangle init.lisp
(add-to-load-path "~/.stumpwm.d/modules/")
#+end_src
** Gaps

#+begin_src lisp :tangle init.lisp
(ql:quickload "swm-gaps")

(setf swm-gaps:*inner-gaps-size* 10
      swm-gaps:*outer-gaps-size* 10
      swm-gaps:*head-gaps-size* 10)

(swm-gaps:toggle-gaps)

(define-key *root-map* (kbd "t") "toggle-gaps")
#+end_src
** Modeline

#+begin_src lisp :tangle init.lisp
  (ql:quickload "battery-portable")

  (setf *screen-mode-line-format* (list "[%d] [^B%n^b]%W  [^B%B^b]")
        ,*window-format* "%m%n%s%c"
        ,*time-modeline-string* "%m/%e %k:%M"
        ,*mode-line-foreground-color* "#dddddd"
        ,*mode-line-background-color* "#202020"
        ,*mode-line-border-color* "#dddddd"
        ,*mode-line-position* :top
        ,*mode-line-pad-x* 5
        ,*mode-line-pad-y* 5
        ,*mode-line-timeout* 1)

  (mode-line)

  (define-key *root-map* (kbd "SPC") "mode-line")
#+end_src

* Monocle mode

#+begin_src lisp :tangle init.lisp
  (defcommand monocle () ()
    "Toggles both the modeline and gaps"
    (swm-gaps:toggle-gaps)
    (mode-line))

  (define-key *top-map* (kbd "s-SPC") "monocle")
#+end_src

* Colors

#+begin_src lisp :tangle init.lisp
  (setf *window-border-style* :tight
        ,*ignore-wm-inc-hints* NIL
        ,*maxsize-border-width* 1
        ,*normal-border-width* 1
        ,*transient-border-width*)

  (set-win-bg-color "#202020")
  (set-unfocus-color "#202020")
  (set-focus-color "#dddddd")
#+end_src
